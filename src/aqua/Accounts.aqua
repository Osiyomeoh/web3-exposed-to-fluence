import "./types.aqua"

service Accounts("Accounts"):
    create(entropy: ?string) -> Account
    privateKeyToAccount(privateKey: string, ignoreLength: ?bool) -> Account
    signTransaction(tx: TransactionSettings, privateKey: string) -> SignedTransactionAccounts
    recoverTransaction(signature: string) -> string
    hashMessage(message: string) -> string
    sign(data: string, privatekey: string) -> SignedData
    recover(message: string, signature: string, preFixed: ?bool) -> string
    recoverWithSignatureObject(signature: SignatureData) -> string
    encrypt(privateKey: string, password: string) -> EncryptedKeystoreV3
    decrypt(keystoreJsonV3: EncryptedKeystoreV3, password: string) -> Account
    wallet() -> []Account
    walletCreate(numberOfAccounts: u64, entropy: string) -> []Account
    walletAdd(privateKey: string) -> Account
    walletRemove(address: string) -> bool
    walletClear() -> []Account
    walletEncrypt(password: string) -> []EncryptedKeystoreV3
    walletDecrypt(keystoreArray: []EncryptedKeystoreV3, password: string) -> []Account
