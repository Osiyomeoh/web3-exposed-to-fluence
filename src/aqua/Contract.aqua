import "./types.aqua"

service Contract("Contract"):
    deploySend(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, deployOptions: DeployOptions, sendOptions: SendOptions) -> string
    deployEstimateGas(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, deployOptions: DeployOptions, gasOption: ?EstimateGasOptions) -> u64
    deployEncodeABI(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, deployOptions: DeployOptions) -> string
    methodCall(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, methodName: string, parameters: StringArray, callOptions: ?CallOptions) -> StringObject
    methodSend(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, methodName: string, parameters: StringArray, sendOptions: SendOptions) -> StringObject
    methodEstimateGas(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, methodName: string, parameters: StringArray, estimateGasOptions: ?EstimateGasOptions) -> u64
    methodEncodeABI(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, methodName: string, parameters: StringArray) -> string
    getAllEvents(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, eventOptions: ?EventOptions) -> []EventObject
    getPastEvents(jsonInterface: []AbiItem, address: ?string, options: ?ContractOptions, event: string, eventOptions: ?EventOptions) -> []EventObject
