/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.0-247
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface ConvertDef {
    strTof64: (input: string, callParams: CallParams<'input'>) => number[] | Promise<number[]>;
}
export function registerConvert(service: ConvertDef): void;
export function registerConvert(serviceId: string, service: ConvertDef): void;
export function registerConvert(peer: FluencePeer, service: ConvertDef): void;
export function registerConvert(peer: FluencePeer, serviceId: string, service: ConvertDef): void;
       

export function registerConvert(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Convert",
    "functions" : [
        {
            "functionName" : "strTof64",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      


export interface Web3Def {
    getMetaInformation: (callParams: CallParams<null>) => { version: string; } | Promise<{ version: string; }>;
}
export function registerWeb3(service: Web3Def): void;
export function registerWeb3(serviceId: string, service: Web3Def): void;
export function registerWeb3(peer: FluencePeer, service: Web3Def): void;
export function registerWeb3(peer: FluencePeer, serviceId: string, service: Web3Def): void;
       

export function registerWeb3(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Web3",
    "functions" : [
        {
            "functionName" : "getMetaInformation",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      


export interface EthDef {
    getAccounts: (callParams: CallParams<null>) => string[] | Promise<string[]>;
    getBalance: (address: string, defaultBlock: string | null, callParams: CallParams<'address' | 'defaultBlock'>) => string | Promise<string>;
    getBlockNumber: (callParams: CallParams<null>) => number | Promise<number>;
    getFeeHistory: (blockCount: number, newestBlock: number, rewardPercentiles: number[], callParams: CallParams<'blockCount' | 'newestBlock' | 'rewardPercentiles'>) => { baseFeePerGas: string[]; gasUsedRatio: number[]; oldestBlock: number; reward: string[]; } | Promise<{ baseFeePerGas: string[]; gasUsedRatio: number[]; oldestBlock: number; reward: string[]; }>;
    getGasPrice: (callParams: CallParams<null>) => string | Promise<string>;
}
export function registerEth(service: EthDef): void;
export function registerEth(serviceId: string, service: EthDef): void;
export function registerEth(peer: FluencePeer, service: EthDef): void;
export function registerEth(peer: FluencePeer, serviceId: string, service: EthDef): void;
       

export function registerEth(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Eth",
    "functions" : [
        {
            "functionName" : "getAccounts",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBalance",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBlockNumber",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getFeeHistory",
            "argDefs" : [
                {
                    "name" : "blockCount",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "newestBlock",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "rewardPercentiles",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getGasPrice",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions

