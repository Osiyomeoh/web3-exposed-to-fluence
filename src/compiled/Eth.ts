/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.0-247
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface EthDef {
    call: (callObject: { accessList: string[] | null; chain: string | null; common: { baseChain: string | null; customChain: { chainId: number; name: string | null; networkId: number; }; hardfork: string | null; }; data: string | null; from: string; gas: number | null; gasPrice: string | null; hardfork: string | null; maxFeePerGas: string | null; maxPriorityFeePerGas: string | null; nonce: number | null; to: string | null; type: string | null; value: string | null; }, defaultBlock: string | null, callParams: CallParams<'callObject' | 'defaultBlock'>) => string | Promise<string>;
    estimateGas: (callObject: { accessList: string[] | null; chain: string | null; common: { baseChain: string | null; customChain: { chainId: number; name: string | null; networkId: number; }; hardfork: string | null; }; data: string | null; from: string; gas: number | null; gasPrice: string | null; hardfork: string | null; maxFeePerGas: string | null; maxPriorityFeePerGas: string | null; nonce: number | null; to: string | null; type: string | null; value: string | null; }, callParams: CallParams<'callObject'>) => number | Promise<number>;
    getAccounts: (callParams: CallParams<null>) => string[] | Promise<string[]>;
    getBalance: (address: string, defaultBlock: string | null, callParams: CallParams<'address' | 'defaultBlock'>) => string | Promise<string>;
    getBlock: (blockHashOrBlockNumber: string, callParams: CallParams<'blockHashOrBlockNumber'>) => { difficulty: number; extraData: string; gasLimit: number; gasUsed: number; hash: string; logsBloom: string | null; miner: string; nonce: string | null; number: number; parentHash: string; sha3Uncles: string; size: number; stateRoot: string; timestamp: number; totalDifficulty: number; transactionRoot: string; transactions: string[]; uncles: string[]; } | Promise<{ difficulty: number; extraData: string; gasLimit: number; gasUsed: number; hash: string; logsBloom: string | null; miner: string; nonce: string | null; number: number; parentHash: string; sha3Uncles: string; size: number; stateRoot: string; timestamp: number; totalDifficulty: number; transactionRoot: string; transactions: string[]; uncles: string[]; }>;
    getBlockNumber: (callParams: CallParams<null>) => number | Promise<number>;
    getBlockTransactionCount: (blockHashOrBlockNumber: string, callParams: CallParams<'blockHashOrBlockNumber'>) => number | Promise<number>;
    getBlockUncleCount: (blockHashOrBlockNumber: string, callParams: CallParams<'blockHashOrBlockNumber'>) => number | Promise<number>;
    getChainId: (callParams: CallParams<null>) => number | Promise<number>;
    getCode: (address: string, defaultBlock: string | null, callParams: CallParams<'address' | 'defaultBlock'>) => string | Promise<string>;
    getCoinbase: (callParams: CallParams<null>) => string | Promise<string>;
    getFeeHistory: (blockCount: number, newestBlock: number, rewardPercentiles: number[], callParams: CallParams<'blockCount' | 'newestBlock' | 'rewardPercentiles'>) => { baseFeePerGas: string[]; gasUsedRatio: number[]; oldestBlock: number; reward: string[][]; } | Promise<{ baseFeePerGas: string[]; gasUsedRatio: number[]; oldestBlock: number; reward: string[][]; }>;
    getGasPrice: (callParams: CallParams<null>) => string | Promise<string>;
    getHashrate: (callParams: CallParams<null>) => number | Promise<number>;
    getId: (callParams: CallParams<null>) => number | Promise<number>;
    getMetaInformation: (callParams: CallParams<null>) => { defaultAccount: string; defaultBlock: string; defaultChain: string; defaultHardfork: string; handleRevert: boolean; isMining: boolean; isSyncing: { currentBlock: number; highestBlock: number; knownStates: number; pulledStates: number; startingBlock: number; } | null; transactionBlockTimeout: number; transactionConfirmationBlocks: number; transactionPollingTimeout: number; } | Promise<{ defaultAccount: string; defaultBlock: string; defaultChain: string; defaultHardfork: string; handleRevert: boolean; isMining: boolean; isSyncing: { currentBlock: number; highestBlock: number; knownStates: number; pulledStates: number; startingBlock: number; } | null; transactionBlockTimeout: number; transactionConfirmationBlocks: number; transactionPollingTimeout: number; }>;
    getNodeInfo: (callParams: CallParams<null>) => string | Promise<string>;
    getPastLogs: (options: { address: string; fromBlock: string; toBlock: string; topics: string[]; }, callParams: CallParams<'options'>) => { address: string; blockHash: string | null; blockNumber: number | null; data: string; logIndex: number; topics: string[]; transactionHash: string; transactionIndex: number; }[] | Promise<{ address: string; blockHash: string | null; blockNumber: number | null; data: string; logIndex: number; topics: string[]; transactionHash: string; transactionIndex: number; }[]>;
    getPeerCount: (callParams: CallParams<null>) => number | Promise<number>;
    getPendingTransactions: (callParams: CallParams<null>) => { blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; }[] | Promise<{ blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; }[]>;
    getProof: (address: string, storageKey: string[], blockNumber: string, callParams: CallParams<'address' | 'storageKey' | 'blockNumber'>) => { accountProof: string[]; address: string; balance: string; codeHash: string; nonce: string; storageHash: string; storageProof: { key: string; value: string; }[]; } | Promise<{ accountProof: string[]; address: string; balance: string; codeHash: string; nonce: string; storageHash: string; storageProof: { key: string; value: string; }[]; }>;
    getStorageAt: (address: string, position: string, defaultBlock: string | null, callParams: CallParams<'address' | 'position' | 'defaultBlock'>) => string | Promise<string>;
    getTransaction: (transactionHash: string, callParams: CallParams<'transactionHash'>) => { blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; } | Promise<{ blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; }>;
    getTransactionCount: (address: string, defaultBlock: string | null, callParams: CallParams<'address' | 'defaultBlock'>) => number | Promise<number>;
    getTransactionFromBlock: (hashString: string, indexNumber: number, callParams: CallParams<'hashString' | 'indexNumber'>) => { blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; } | Promise<{ blockHash: string; blockNumber: number; from: string; gas: number; gasPrice: string; hash: string; input: string; nonce: number; to: string; transactionIndex: number; value: string; }>;
    getTransactionReceipt: (hash: string, callParams: CallParams<'hash'>) => { blockHash: string; blockNumber: number; contractAddress: string | null; cumulativeGasUsed: number; from: string; gasUsed: number; logs: { address: string; blockHash: string | null; blockNumber: number | null; data: string; logIndex: number; topics: string[]; transactionHash: string; transactionIndex: number; }[]; status: boolean; to: string | null; transactionHash: string; transactionIndex: number; } | Promise<{ blockHash: string; blockNumber: number; contractAddress: string | null; cumulativeGasUsed: number; from: string; gasUsed: number; logs: { address: string; blockHash: string | null; blockNumber: number | null; data: string; logIndex: number; topics: string[]; transactionHash: string; transactionIndex: number; }[]; status: boolean; to: string | null; transactionHash: string; transactionIndex: number; }>;
    getUncle: (blockHashOrBlockNumber: string, uncleIndex: number, callParams: CallParams<'blockHashOrBlockNumber' | 'uncleIndex'>) => { difficulty: number; extraData: string; gasLimit: number; gasUsed: number; hash: string; logsBloom: string | null; miner: string; nonce: string | null; number: number; parentHash: string; sha3Uncles: string; size: number; stateRoot: string; timestamp: number; totalDifficulty: number; transactionRoot: string; transactions: string[]; uncles: string[]; } | Promise<{ difficulty: number; extraData: string; gasLimit: number; gasUsed: number; hash: string; logsBloom: string | null; miner: string; nonce: string | null; number: number; parentHash: string; sha3Uncles: string; size: number; stateRoot: string; timestamp: number; totalDifficulty: number; transactionRoot: string; transactions: string[]; uncles: string[]; }>;
    getWork: (callParams: CallParams<null>) => string[] | Promise<string[]>;
    isListening: (callParams: CallParams<null>) => boolean | Promise<boolean>;
    sendSignedTransaction: (signedTransactionData: string, callParams: CallParams<'signedTransactionData'>) => string | Promise<string>;
    sendTransaction: (transactionObject: { accessList: string[] | null; chain: string | null; common: { baseChain: string | null; customChain: { chainId: number; name: string | null; networkId: number; }; hardfork: string | null; }; data: string | null; from: string; gas: number | null; gasPrice: string | null; hardfork: string | null; maxFeePerGas: string | null; maxPriorityFeePerGas: string | null; nonce: number | null; to: string | null; type: string | null; value: string | null; }, callParams: CallParams<'transactionObject'>) => string | Promise<string>;
    sign: (dataToSign: string, address: string, callParams: CallParams<'dataToSign' | 'address'>) => string | Promise<string>;
    signTransaction: (transactionObject: { accessList: string[] | null; chain: string | null; common: { baseChain: string | null; customChain: { chainId: number; name: string | null; networkId: number; }; hardfork: string | null; }; data: string | null; from: string; gas: number | null; gasPrice: string | null; hardfork: string | null; maxFeePerGas: string | null; maxPriorityFeePerGas: string | null; nonce: number | null; to: string | null; type: string | null; value: string | null; }, address: string, callParams: CallParams<'transactionObject' | 'address'>) => { raw: string; tx: { gas: string; gasPrice: string; hash: string; input: string; nonce: string; r: string; s: string; to: string; v: string; value: string; }; } | Promise<{ raw: string; tx: { gas: string; gasPrice: string; hash: string; input: string; nonce: string; r: string; s: string; to: string; v: string; value: string; }; }>;
    submitWork: (nonce: string, powHash: string, digest: string, callParams: CallParams<'nonce' | 'powHash' | 'digest'>) => boolean | Promise<boolean>;
}
export function registerEth(service: EthDef): void;
export function registerEth(serviceId: string, service: EthDef): void;
export function registerEth(peer: FluencePeer, service: EthDef): void;
export function registerEth(peer: FluencePeer, serviceId: string, service: EthDef): void;
       

export function registerEth(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Eth",
    "functions" : [
        {
            "functionName" : "call",
            "argDefs" : [
                {
                    "name" : "callObject",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "estimateGas",
            "argDefs" : [
                {
                    "name" : "callObject",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getAccounts",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBalance",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBlock",
            "argDefs" : [
                {
                    "name" : "blockHashOrBlockNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBlockNumber",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBlockTransactionCount",
            "argDefs" : [
                {
                    "name" : "blockHashOrBlockNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getBlockUncleCount",
            "argDefs" : [
                {
                    "name" : "blockHashOrBlockNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getChainId",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getCode",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getCoinbase",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getFeeHistory",
            "argDefs" : [
                {
                    "name" : "blockCount",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "newestBlock",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "rewardPercentiles",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getGasPrice",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getHashrate",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getId",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getMetaInformation",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getNodeInfo",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getPastLogs",
            "argDefs" : [
                {
                    "name" : "options",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getPeerCount",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getPendingTransactions",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getProof",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "storageKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "blockNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getStorageAt",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "position",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getTransaction",
            "argDefs" : [
                {
                    "name" : "transactionHash",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getTransactionCount",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "defaultBlock",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getTransactionFromBlock",
            "argDefs" : [
                {
                    "name" : "hashString",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "indexNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getTransactionReceipt",
            "argDefs" : [
                {
                    "name" : "hash",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getUncle",
            "argDefs" : [
                {
                    "name" : "blockHashOrBlockNumber",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "uncleIndex",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "getWork",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "isListening",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "sendSignedTransaction",
            "argDefs" : [
                {
                    "name" : "signedTransactionData",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "sendTransaction",
            "argDefs" : [
                {
                    "name" : "transactionObject",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "sign",
            "argDefs" : [
                {
                    "name" : "dataToSign",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "signTransaction",
            "argDefs" : [
                {
                    "name" : "transactionObject",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "submitWork",
            "argDefs" : [
                {
                    "name" : "nonce",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "powHash",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "digest",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions

