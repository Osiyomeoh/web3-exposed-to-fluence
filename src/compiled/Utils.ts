/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.0-247
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface UtilsDef {
    asciiToHex: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    bytesToHex: (input: number[], callParams: CallParams<'input'>) => string | Promise<string>;
    checkAddressChecksum: (address: string, callParams: CallParams<'address'>) => boolean | Promise<boolean>;
    fromWei: (input: string, unit: string | null, callParams: CallParams<'input' | 'unit'>) => string | Promise<string>;
    hexToAscii: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    hexToBytes: (input: string, callParams: CallParams<'input'>) => number[] | Promise<number[]>;
    hexToNumber: (input: string, callParams: CallParams<'input'>) => number | Promise<number>;
    hexToNumberString: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    hexToUtf8: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    isAddress: (address: string, callParams: CallParams<'address'>) => boolean | Promise<boolean>;
    isHex: (input: string, callParams: CallParams<'input'>) => boolean | Promise<boolean>;
    isHexStrict: (input: string, callParams: CallParams<'input'>) => boolean | Promise<boolean>;
    numberToHex: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    padLeft: (input: string, characterAmount: number, sign: string | null, callParams: CallParams<'input' | 'characterAmount' | 'sign'>) => string | Promise<string>;
    padRight: (input: string, characterAmount: number, sign: string | null, callParams: CallParams<'input' | 'characterAmount' | 'sign'>) => string | Promise<string>;
    sha3: (input: string, callParams: CallParams<'input'>) => string | null | Promise<string | null>;
    soliditySha3: (val: string[], callParams: CallParams<'val'>) => string | null | Promise<string | null>;
    soliditySha3Raw: (val: string[], callParams: CallParams<'val'>) => string | Promise<string>;
    stripHexPrefix: (hex: string, callParams: CallParams<'hex'>) => string | Promise<string>;
    toChecksumAddress: (address: string, callParams: CallParams<'address'>) => string | Promise<string>;
    toHex: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
    toTwosComplement: (input: number, callParams: CallParams<'input'>) => string | Promise<string>;
    toWei: (input: string, unit: string | null, callParams: CallParams<'input' | 'unit'>) => string | Promise<string>;
    typedSoliditySha3: (val: { type: string; value: string; }[], callParams: CallParams<'val'>) => string | null | Promise<string | null>;
    typedSoliditySha3Raw: (val: { type: string; value: string; }[], callParams: CallParams<'val'>) => string | Promise<string>;
    unitMap: (callParams: CallParams<null>) => { babbage: string; ether: string; femtoether: string; finney: string; gether: string; grand: string; gwei: string; kether: string; kwei: string; lovelace: string; mether: string; micro: string; microether: string; milli: string; milliether: string; mwei: string; nano: string; nanoether: string; noether: string; picoether: string; shannon: string; szabo: string; tether: string; wei: string; } | Promise<{ babbage: string; ether: string; femtoether: string; finney: string; gether: string; grand: string; gwei: string; kether: string; kwei: string; lovelace: string; mether: string; micro: string; microether: string; milli: string; milliether: string; mwei: string; nano: string; nanoether: string; noether: string; picoether: string; shannon: string; szabo: string; tether: string; wei: string; }>;
    utf8ToHex: (input: string, callParams: CallParams<'input'>) => string | Promise<string>;
}
export function registerUtils(service: UtilsDef): void;
export function registerUtils(serviceId: string, service: UtilsDef): void;
export function registerUtils(peer: FluencePeer, service: UtilsDef): void;
export function registerUtils(peer: FluencePeer, serviceId: string, service: UtilsDef): void;
       

export function registerUtils(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Utils",
    "functions" : [
        {
            "functionName" : "asciiToHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "bytesToHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "checkAddressChecksum",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "fromWei",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "unit",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hexToAscii",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hexToBytes",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hexToNumber",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hexToNumberString",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hexToUtf8",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "isAddress",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "isHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "isHexStrict",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "numberToHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "padLeft",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "characterAmount",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "sign",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "padRight",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "characterAmount",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "sign",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "sha3",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "optional"
            }
        },
        {
            "functionName" : "soliditySha3",
            "argDefs" : [
                {
                    "name" : "val",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "optional"
            }
        },
        {
            "functionName" : "soliditySha3Raw",
            "argDefs" : [
                {
                    "name" : "val",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "stripHexPrefix",
            "argDefs" : [
                {
                    "name" : "hex",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toChecksumAddress",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toTwosComplement",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "toWei",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "unit",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "typedSoliditySha3",
            "argDefs" : [
                {
                    "name" : "val",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "optional"
            }
        },
        {
            "functionName" : "typedSoliditySha3Raw",
            "argDefs" : [
                {
                    "name" : "val",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "unitMap",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "utf8ToHex",
            "argDefs" : [
                {
                    "name" : "input",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions

