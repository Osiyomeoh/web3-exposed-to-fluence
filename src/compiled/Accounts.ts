/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.0-247
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface AccountsDef {
    create: (entropy: string | null, callParams: CallParams<'entropy'>) => { address: string; privateKey: string; } | Promise<{ address: string; privateKey: string; }>;
    decrypt: (keystoreJsonV3: { address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; }, password: string, callParams: CallParams<'keystoreJsonV3' | 'password'>) => { address: string; privateKey: string; } | Promise<{ address: string; privateKey: string; }>;
    encrypt: (privateKey: string, password: string, callParams: CallParams<'privateKey' | 'password'>) => { address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; } | Promise<{ address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; }>;
    hashMessage: (message: string, callParams: CallParams<'message'>) => string | Promise<string>;
    privateKeyToAccount: (privateKey: string, ignoreLength: boolean | null, callParams: CallParams<'privateKey' | 'ignoreLength'>) => { address: string; privateKey: string; } | Promise<{ address: string; privateKey: string; }>;
    recover: (message: string, signature: string, preFixed: boolean | null, callParams: CallParams<'message' | 'signature' | 'preFixed'>) => string | Promise<string>;
    recoverTransaction: (signature: string, callParams: CallParams<'signature'>) => string | Promise<string>;
    recoverWithSignatureObject: (signature: { messageHash: string; r: string; s: string; v: string; }, callParams: CallParams<'signature'>) => string | Promise<string>;
    sign: (data: string, privatekey: string, callParams: CallParams<'data' | 'privatekey'>) => { message: string; messageHash: string | null; r: string; rawTransaction: string | null; s: string; signature: string; transactionHash: string | null; v: string; } | Promise<{ message: string; messageHash: string | null; r: string; rawTransaction: string | null; s: string; signature: string; transactionHash: string | null; v: string; }>;
    signTransaction: (tx: { chain: string | null; chainId: number | null; common: { baseChain: string | null; customChain: { chainId: number; name: string | null; networkId: number; }; hardfork: string | null; } | null; data: string | null; from: string | null; gas: number | null; gasPrice: number | null; hardfork: string | null; nonce: number | null; to: string | null; value: string | null; }, privateKey: string, callParams: CallParams<'tx' | 'privateKey'>) => { messageHash: string | null; r: string; rawTransaction: string | null; s: string; transactionHash: string | null; v: string; } | Promise<{ messageHash: string | null; r: string; rawTransaction: string | null; s: string; transactionHash: string | null; v: string; }>;
    wallet: (callParams: CallParams<null>) => { address: string; privateKey: string; }[] | Promise<{ address: string; privateKey: string; }[]>;
    walletAdd: (privateKey: string, callParams: CallParams<'privateKey'>) => { address: string; privateKey: string; } | Promise<{ address: string; privateKey: string; }>;
    walletClear: (callParams: CallParams<null>) => { address: string; privateKey: string; }[] | Promise<{ address: string; privateKey: string; }[]>;
    walletCreate: (numberOfAccounts: number, entropy: string, callParams: CallParams<'numberOfAccounts' | 'entropy'>) => { address: string; privateKey: string; }[] | Promise<{ address: string; privateKey: string; }[]>;
    walletDecrypt: (keystoreArray: { address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; }[], password: string, callParams: CallParams<'keystoreArray' | 'password'>) => { address: string; privateKey: string; }[] | Promise<{ address: string; privateKey: string; }[]>;
    walletEncrypt: (password: string, callParams: CallParams<'password'>) => { address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; }[] | Promise<{ address: string; crypto: { cipher: string; cipherparams: { iv: string; }; ciphertext: string; kdf: string; kdfparams: { dklen: number; n: number; p: number; r: number; salt: string; }; mac: string; }; id: string; version: number; }[]>;
    walletRemove: (address: string, callParams: CallParams<'address'>) => boolean | Promise<boolean>;
}
export function registerAccounts(service: AccountsDef): void;
export function registerAccounts(serviceId: string, service: AccountsDef): void;
export function registerAccounts(peer: FluencePeer, service: AccountsDef): void;
export function registerAccounts(peer: FluencePeer, serviceId: string, service: AccountsDef): void;
       

export function registerAccounts(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "Accounts",
    "functions" : [
        {
            "functionName" : "create",
            "argDefs" : [
                {
                    "name" : "entropy",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "decrypt",
            "argDefs" : [
                {
                    "name" : "keystoreJsonV3",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "password",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "encrypt",
            "argDefs" : [
                {
                    "name" : "privateKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "password",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "hashMessage",
            "argDefs" : [
                {
                    "name" : "message",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "privateKeyToAccount",
            "argDefs" : [
                {
                    "name" : "privateKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "ignoreLength",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "recover",
            "argDefs" : [
                {
                    "name" : "message",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "signature",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "preFixed",
                    "argType" : {
                        "tag" : "optional"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "recoverTransaction",
            "argDefs" : [
                {
                    "name" : "signature",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "recoverWithSignatureObject",
            "argDefs" : [
                {
                    "name" : "signature",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "sign",
            "argDefs" : [
                {
                    "name" : "data",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "privatekey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "signTransaction",
            "argDefs" : [
                {
                    "name" : "tx",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "privateKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "wallet",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletAdd",
            "argDefs" : [
                {
                    "name" : "privateKey",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletClear",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletCreate",
            "argDefs" : [
                {
                    "name" : "numberOfAccounts",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "entropy",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletDecrypt",
            "argDefs" : [
                {
                    "name" : "keystoreArray",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "password",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletEncrypt",
            "argDefs" : [
                {
                    "name" : "password",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        },
        {
            "functionName" : "walletRemove",
            "argDefs" : [
                {
                    "name" : "address",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions

