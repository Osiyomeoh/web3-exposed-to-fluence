import "./address.aqua"
import "../src/aqua/types.aqua"
import "../src/aqua/Convert.aqua"
import "../src/aqua/Contract.aqua"

func demoDeploySend() -> string:
    on PEER via RELAY:
        jsonInterface <- Convert.getABIItem()
        contractOptions <- Convert.getContractOptions()
        deployOptions <- Convert.getDeployOptions()
        sendOptions <- Convert.getSendOptions()
        address <- Convert.getOptionalString(WALLET_PUB_KEY)
        res <- Contract.deploySend(jsonInterface, address, contractOptions, deployOptions, sendOptions)
    <- res

func demoDeployEstimateGas() -> u64:
    on PEER via RELAY:
        jsonInterface <- Convert.getABIItem()
        contractOptions <- Convert.getContractOptions()
        deployOptions <- Convert.getDeployOptions()
        gasOptions <- Convert.getEstimateGasOptions()
        address <- Convert.getOptionalString(WALLET_PUB_KEY)
        res <- Contract.deployEstimateGas(jsonInterface, address, contractOptions, deployOptions, gasOptions)
    <- res

func demoDeployEncodeABI() -> string:
    on PEER via RELAY:
        jsonInterface <- Convert.getABIItem()
        contractOptions <- Convert.getContractOptions()
        deployOptions <- Convert.getDeployOptions()
        address <- Convert.getOptionalString(WALLET_PUB_KEY)
        res <- Contract.deployEncodeABI(jsonInterface, address, contractOptions, deployOptions)
    <- res


func demoMethodCall() -> StringObject:
    on PEER via RELAY:
        jsonInterface <- Convert.getABIItemRopsten()
        contractOptions <- Convert.getContractOptions()
        deployOptions <- Convert.getDeployOptions()
        address <- Convert.getOptionalString("0xCE66B4B15CbCCFe031dB38be60Dfc3f98eBaEbf0")
        -- res <- Contract.methodCall(jsonInterface, address, contractOptions, deployOptions)
        res = ""
    <- res
