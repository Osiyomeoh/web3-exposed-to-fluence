import "./address.aqua"
import "../src/aqua/types.aqua"
import "../src/aqua/Convert.aqua"
import "../src/aqua/Accounts.aqua"

func demoCreate() -> Account:
    on PEER via RELAY:
        entropy <- Convert.getOptionalString("ougshrgosiroin")
        res <- Accounts.create(entropy)
    <- res

func demoPrivateKeyToAccount() -> Account:
    on PEER via RELAY:
        ignoreLength <- Convert.getOptionalBool(true)
        res <- Accounts.privateKeyToAccount(WALLET_PRIV_KEY, ignoreLength)
    <- res

func demoSignTransaction() -> SignedTransactionAccounts:
    on PEER via RELAY:
        transactionOptions <- Convert.getTransactionOptions()
        res <- Accounts.signTransaction(transactionOptions, WALLET_PRIV_KEY)
    <- res

func demoRecoverTransaction() -> string:
    on PEER via RELAY:
        res <- Accounts.recoverTransaction("0xf86180808401ef364594f0109fc8df283027b6285cc889f5aa624eac1f5580801ca031573280d608f75137e33fc14655f097867d691d5c4c44ebe5ae186070ac3d5ea0524410802cdc025034daefcdfa08e7d2ee3f0b9d9ae184b2001fe0aff07603d9")
    <- res

func demoHashMessage() -> string:
    on PEER via RELAY:
        res <- Accounts.hashMessage("Hello World")
    <- res

func demoSign() -> SignedData:
    on PEER via RELAY:
        res <- Accounts.sign("Hello World", WALLET_PRIV_KEY)
    <- res

func demoRecover() -> string:
    on PEER via RELAY:
        res <- Accounts.recover("0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2", "0xca4a986cb376ec13891affdf3180ece23877a1d7ee9bf71d67133bb60abd3ea6482b0d79347d312bf76d7f31c5895ea51eab485a0fb8c4376f37f5428fec274b1b", nil)
    <- res

func demoRecoverWithSignatureObject() -> string:
    on PEER via RELAY:
        signObject <- Convert.getSignatureData()
        res <- Accounts.recoverWithSignatureObject(signObject)
    <- res

func demoEncrypt() -> EncryptedKeystoreV3:
    on PEER via RELAY:
        res <- Accounts.encrypt(WALLET_PRIV_KEY, "")
    <- res

func demoDecrypt() -> Account:
    on PEER via RELAY:
        json <- Convert.getEncryptedKeystoreV3()
        res <- Accounts.decrypt(json, "")
    <- res

func demoWallet() -> []Account:
    on PEER via RELAY:
        res <- Accounts.wallet()
    <- res

func demoWalletCreate() -> []Account:
    on PEER via RELAY:
        res <- Accounts.walletCreate(2, "pisjgpsirjgsrijg")
    <- res

func demoWalletAdd() -> Account:
    on PEER via RELAY:
        res <- Accounts.walletAdd(WALLET_PRIV_KEY)
    <- res

func demoWalletRemove() -> bool:
    on PEER via RELAY:
        res <- Accounts.walletRemove(WALLET_PUB_KEY)
    <- res

func demoWalletClear() -> []Account:
    on PEER via RELAY:
        res <- Accounts.walletClear()
    <- res

func demoWalletEncrypt() -> []EncryptedKeystoreV3:
    on PEER via RELAY:
        res <- Accounts.walletEncrypt("")
    <- res

func demoWalletDecrypt() -> []Account:
    on PEER via RELAY:
        json <- Convert.getDecryptEncryptedKeystoreV3()
        res <- Accounts.walletDecrypt(json, "")
    <- res
